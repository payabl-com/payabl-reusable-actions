name: PR Validation

on:
  workflow_call:
    inputs:
      node-version:
        description: 'Node.js version to use'
        required: false
        type: string
        default: '22.x'
      project-type:
        description: 'Project type (nodejs, nestjs, nextjs)'
        required: true
        type: string
      mongodb-version:
        description: 'MongoDB version for NestJS tests'
        required: false
        type: string
        default: '7.0'
      skip-lint:
        description: 'Skip lint step'
        required: false
        type: boolean
        default: false
      skip-typecheck:
        description: 'Skip type check step'
        required: false
        type: boolean
        default: false
      skip-tests:
        description: 'Skip test step'
        required: false
        type: boolean
        default: false
      skip-e2e:
        description: 'Skip e2e tests'
        required: false
        type: boolean
        default: false
      skip-build:
        description: 'Skip build step'
        required: false
        type: boolean
        default: false
      coverage-threshold:
        description: 'Coverage threshold percentage'
        required: false
        type: number
        default: 80
      test-env:
        description: 'Test environment for Node.js projects'
        required: false
        type: string
        default: 'dev'
      working-directory:
        description: 'Working directory'
        required: false
        type: string
        default: '.'
      custom-lint-command:
        description: 'Custom lint command (overrides default)'
        required: false
        type: string
      custom-test-command:
        description: 'Custom test command (overrides default)'
        required: false
        type: string
      run-security-audit:
        description: 'Run npm audit for security vulnerabilities'
        required: false
        type: boolean
        default: true
      fail-on-audit:
        description: 'Fail PR if security vulnerabilities found'
        required: false
        type: boolean
        default: false
    secrets:
      NPM_TOKEN:
        description: 'NPM registry token'
        required: false
      SONAR_TOKEN:
        description: 'SonarQube token'
        required: false
    outputs:
      coverage-percentage:
        description: 'Coverage percentage achieved'
        value: ${{ jobs.pr-validation.outputs.coverage }}

jobs:
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    
    services:
      mongodb:
        image: ${{ inputs.project-type == 'nestjs' && format('mongo:{0}', inputs.mongodb-version) || '' }}
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        options: >-
          ${{ inputs.project-type == 'nestjs' && '--health-cmd "mongosh --eval \"db.runCommand(\\\"ping\\\")\""
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5' || '' }}

    outputs:
      coverage: ${{ steps.coverage.outputs.percentage }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'npm'
          cache-dependency-path: ${{ inputs.working-directory }}/package-lock.json

      - name: Setup NPM registry
        if: secrets.NPM_TOKEN != ''
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc

      - name: Cache node modules
        id: cache
        uses: actions/cache@v4
        with:
          path: ${{ inputs.working-directory }}/node_modules
          key: ${{ runner.os }}-node-${{ inputs.project-type }}-${{ hashFiles(format('{0}/package-lock.json', inputs.working-directory)) }}
          restore-keys: |
            ${{ runner.os }}-node-${{ inputs.project-type }}-

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Security audit
        if: inputs.run-security-audit
        run: |
          npm audit --audit-level=moderate
          if [ $? -ne 0 ] && [ "${{ inputs.fail-on-audit }}" == "true" ]; then
            echo "Security vulnerabilities found!"
            exit 1
          fi
        continue-on-error: ${{ !inputs.fail-on-audit }}

      - name: Lint
        if: ${{ !inputs.skip-lint }}
        run: |
          if [ -n "${{ inputs.custom-lint-command }}" ]; then
            ${{ inputs.custom-lint-command }}
          elif [ "${{ inputs.project-type }}" == "nodejs" ]; then
            echo "No lint command for Node.js projects"
          else
            npm run lint
          fi

      - name: Type check
        if: ${{ !inputs.skip-typecheck }}
        run: |
          if npm run | grep -q "type:check"; then
            npm run type:check
          else
            echo "No type:check script found, skipping..."
          fi

      - name: i18n validation (Next.js)
        if: ${{ inputs.project-type == 'nextjs' }}
        run: |
          if npm run | grep -q "i18n:check"; then
            npm run i18n:check
          else
            echo "No i18n:check script found, skipping..."
          fi

      - name: Build
        if: ${{ !inputs.skip-build }}
        run: npm run build

      - name: Run tests
        if: ${{ !inputs.skip-tests }}
        env:
          TEST_ENV: ${{ inputs.test-env }}
          MONGODB_URI: ${{ inputs.project-type == 'nestjs' && 'mongodb://root:password@localhost:27017/test?authSource=admin' || '' }}
        run: |
          if [ -n "${{ inputs.custom-test-command }}" ]; then
            ${{ inputs.custom-test-command }}
          elif [ "${{ inputs.project-type }}" == "nodejs" ]; then
            if [ "${{ inputs.test-env }}" == "local" ]; then
              npm run test:local
            elif [ "${{ inputs.test-env }}" == "prod" ]; then
              npm run test:prod  
            else
              npm run test:dev
            fi
          elif [ "${{ inputs.project-type }}" == "nestjs" ]; then
            npm run test:cov:combined
          else
            npm run test:cov
          fi

      - name: Run e2e tests
        if: ${{ !inputs.skip-e2e && (inputs.project-type == 'nestjs' || inputs.project-type == 'nextjs') }}
        env:
          MONGODB_URI: ${{ inputs.project-type == 'nestjs' && 'mongodb://root:password@localhost:27017/test?authSource=admin' || '' }}
        run: |
          if [ "${{ inputs.project-type }}" == "nextjs" ]; then
            npx playwright install --with-deps
            npm run e2e
          elif [ "${{ inputs.project-type }}" == "nestjs" ]; then
            npm run test:e2e:cov
          fi

      - name: Extract coverage percentage
        if: ${{ !inputs.skip-tests }}
        id: coverage
        run: |
          if [ -f "coverage/lcov-report/index.html" ]; then
            COVERAGE=$(grep -o '[0-9]\+\.[0-9]\+%' coverage/lcov-report/index.html | head -1 | sed 's/%//')
            echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
          else
            echo "percentage=0" >> $GITHUB_OUTPUT
          fi

      - name: Coverage threshold check
        if: ${{ !inputs.skip-tests && inputs.coverage-threshold > 0 }}
        run: |
          CURRENT_COVERAGE=$(echo "${{ steps.coverage.outputs.percentage }}" | cut -d'.' -f1)
          if [ "$CURRENT_COVERAGE" -lt "${{ inputs.coverage-threshold }}" ]; then
            echo "❌ Coverage $CURRENT_COVERAGE% is below threshold ${{ inputs.coverage-threshold }}%"
            exit 1
          else
            echo "✅ Coverage $CURRENT_COVERAGE% meets threshold ${{ inputs.coverage-threshold }}%"
          fi

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const coverage = '${{ steps.coverage.outputs.percentage }}' || '0';
            const threshold = '${{ inputs.coverage-threshold }}';
            const projectType = '${{ inputs.project-type }}';
            
            const coverageEmoji = parseFloat(coverage) >= threshold ? '✅' : '❌';
            
            const body = `## 🔍 PR Validation Results
            
            **Project Type:** \`${projectType}\`
            **Node.js Version:** \`${{ inputs.node-version }}\`
            
            ### Test Results
            ${coverageEmoji} **Coverage:** ${coverage}% (threshold: ${threshold}%)
            
            ### Validation Steps
            - ${{ !inputs.skip-lint && '✅' || '⏭️' }} Linting
            - ${{ !inputs.skip-typecheck && '✅' || '⏭️' }} Type checking  
            - ${{ !inputs.skip-build && '✅' || '⏭️' }} Build
            - ${{ !inputs.skip-tests && '✅' || '⏭️' }} Unit tests
            - ${{ !inputs.skip-e2e && (inputs.project-type == 'nestjs' || inputs.project-type == 'nextjs') && '✅' || '⏭️' }} E2E tests
            - ${{ inputs.run-security-audit && '✅' || '⏭️' }} Security audit
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

      - name: Upload test artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-${{ inputs.project-type }}
          path: |
            ${{ inputs.working-directory }}/coverage/
            ${{ inputs.working-directory }}/playwright-report/
            ${{ inputs.working-directory }}/test-results/
          retention-days: 7

      - name: SonarQube analysis
        if: secrets.SONAR_TOKEN != ''
        uses: sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}