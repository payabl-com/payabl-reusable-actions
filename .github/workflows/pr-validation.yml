name: PR Validation

on:
  workflow_call:
    inputs:
      # PR Title validation
      enforce-pr-title:
        description: 'Enable PR title validation'
        required: false
        type: boolean
        default: false
      pr-title-regex:
        description: 'Regex pattern for PR title (e.g., "^(PAYABL|PONE)-\d+.*$")'
        required: false
        type: string
        default: '^(PAYABL|PONE)-\d+.*$'
      pr-title-error-message:
        description: 'Custom error message for PR title validation'
        required: false
        type: string
        default: 'PR title must follow format: PAYABL-123 or PONE-123 followed by description'
      
      # Branch naming validation  
      enforce-branch-naming:
        description: 'Enable branch name validation'
        required: false
        type: boolean
        default: false
      branch-name-regex:
        description: 'Regex pattern for branch names'
        required: false
        type: string
        default: '^(feature|bugfix|hotfix|chore)\/[a-zA-Z0-9-_]+$'
      
      # File changes validation
      enforce-file-patterns:
        description: 'Enable file pattern validation'
        required: false
        type: boolean
        default: false
      forbidden-file-patterns:
        description: 'Comma-separated list of forbidden file patterns'
        required: false
        type: string
        default: '*.log,*.tmp,node_modules/**'
      
      # Commit message validation
      enforce-commit-message:
        description: 'Enable commit message validation'
        required: false
        type: boolean
        default: false
      commit-message-regex:
        description: 'Regex pattern for commit messages'
        required: false
        type: string
        default: '^(feat|fix|chore|docs|style|refactor|test)(\(.+\))?: .{1,50}'
      
      # PR size validation
      enforce-pr-size:
        description: 'Enable PR size validation'
        required: false
        type: boolean
        default: false
      max-changed-files:
        description: 'Maximum number of changed files allowed'
        required: false
        type: number
        default: 20
      max-additions:
        description: 'Maximum number of line additions allowed'
        required: false
        type: number
        default: 500
      
      # Custom validation
      custom-validation-command:
        description: 'Custom validation command to run'
        required: false
        type: string
      
      # Target branches
      target-branches:
        description: 'Comma-separated list of target branches to validate against'
        required: false
        type: string
        default: 'main,develop'

jobs:
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate PR title
        if: inputs.enforce-pr-title
        uses: actions-ecosystem/action-regex-match@v2
        id: pr-title-check
        with:
          text: ${{ github.event.pull_request.title }}
          regex: ${{ inputs.pr-title-regex }}

      - name: Fail on invalid PR title
        if: inputs.enforce-pr-title && steps.pr-title-check.outputs.match == ''
        run: |
          echo "‚ùå ${{ inputs.pr-title-error-message }}"
          echo "Current PR title: '${{ github.event.pull_request.title }}'"
          echo "Expected pattern: ${{ inputs.pr-title-regex }}"
          exit 1

      - name: Validate branch name
        if: inputs.enforce-branch-naming
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          if [[ ! "$BRANCH_NAME" =~ ${{ inputs.branch-name-regex }} ]]; then
            echo "‚ùå Branch name '$BRANCH_NAME' does not match required pattern"
            echo "Expected pattern: ${{ inputs.branch-name-regex }}"
            echo "Examples: feature/add-new-component, bugfix/fix-login-issue, chore/update-dependencies"
            exit 1
          fi
          echo "‚úÖ Branch name '$BRANCH_NAME' is valid"

      - name: Validate file changes
        if: inputs.enforce-file-patterns
        run: |
          echo "Checking for forbidden file patterns..."
          FORBIDDEN_PATTERNS="${{ inputs.forbidden-file-patterns }}"
          IFS=',' read -ra PATTERNS <<< "$FORBIDDEN_PATTERNS"
          
          FOUND_FORBIDDEN=false
          for pattern in "${PATTERNS[@]}"; do
            if git diff --name-only origin/${{ github.base_ref }}..HEAD | grep -E "$pattern"; then
              echo "‚ùå Found forbidden file pattern: $pattern"
              FOUND_FORBIDDEN=true
            fi
          done
          
          if [ "$FOUND_FORBIDDEN" = true ]; then
            echo "‚ùå PR contains forbidden file patterns"
            exit 1
          fi
          echo "‚úÖ No forbidden file patterns found"

      - name: Validate commit messages
        if: inputs.enforce-commit-message
        run: |
          echo "Validating commit messages..."
          INVALID_COMMITS=()
          
          for commit in $(git rev-list origin/${{ github.base_ref }}..HEAD); do
            MESSAGE=$(git log --format=%s -n 1 $commit)
            if [[ ! "$MESSAGE" =~ ${{ inputs.commit-message-regex }} ]]; then
              INVALID_COMMITS+=("$commit: $MESSAGE")
            fi
          done
          
          if [ ${#INVALID_COMMITS[@]} -ne 0 ]; then
            echo "‚ùå Found invalid commit messages:"
            printf '%s\n' "${INVALID_COMMITS[@]}"
            echo ""
            echo "Expected pattern: ${{ inputs.commit-message-regex }}"
            echo "Examples: feat: add new feature, fix(auth): resolve login issue"
            exit 1
          fi
          echo "‚úÖ All commit messages are valid"

      - name: Validate PR size
        if: inputs.enforce-pr-size
        run: |
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}..HEAD | wc -l)
          ADDITIONS=$(git diff --numstat origin/${{ github.base_ref }}..HEAD | awk '{sum += $1} END {print sum}')
          
          echo "PR Statistics:"
          echo "- Changed files: $CHANGED_FILES (max: ${{ inputs.max-changed-files }})"
          echo "- Line additions: $ADDITIONS (max: ${{ inputs.max-additions }})"
          
          if [ $CHANGED_FILES -gt ${{ inputs.max-changed-files }} ]; then
            echo "‚ùå PR changes too many files ($CHANGED_FILES > ${{ inputs.max-changed-files }})"
            echo "Consider splitting this PR into smaller changes"
            exit 1
          fi
          
          if [ $ADDITIONS -gt ${{ inputs.max-additions }} ]; then
            echo "‚ùå PR adds too many lines ($ADDITIONS > ${{ inputs.max-additions }})"
            echo "Consider splitting this PR into smaller changes"
            exit 1
          fi
          
          echo "‚úÖ PR size is within acceptable limits"

      - name: Run custom validation
        if: inputs.custom-validation-command != ''
        run: ${{ inputs.custom-validation-command }}

      - name: Validate target branch
        run: |
          TARGET_BRANCHES="${{ inputs.target-branches }}"
          BASE_BRANCH="${{ github.base_ref }}"
          
          IFS=',' read -ra ALLOWED_BRANCHES <<< "$TARGET_BRANCHES"
          BRANCH_ALLOWED=false
          
          for branch in "${ALLOWED_BRANCHES[@]}"; do
            if [ "$BASE_BRANCH" = "$branch" ]; then
              BRANCH_ALLOWED=true
              break
            fi
          done
          
          if [ "$BRANCH_ALLOWED" = false ]; then
            echo "‚ùå PR targets invalid branch '$BASE_BRANCH'"
            echo "Allowed target branches: $TARGET_BRANCHES"
            exit 1
          fi
          echo "‚úÖ PR targets valid branch '$BASE_BRANCH'"

      - name: PR validation summary
        if: always()
        run: |
          echo "## üîç PR Validation Summary"
          echo ""
          echo "**Validations performed:**"
          echo "- ${{ inputs.enforce-pr-title && '‚úÖ' || '‚è≠Ô∏è' }} PR Title validation"
          echo "- ${{ inputs.enforce-branch-naming && '‚úÖ' || '‚è≠Ô∏è' }} Branch naming validation"
          echo "- ${{ inputs.enforce-file-patterns && '‚úÖ' || '‚è≠Ô∏è' }} File pattern validation"
          echo "- ${{ inputs.enforce-commit-message && '‚úÖ' || '‚è≠Ô∏è' }} Commit message validation"
          echo "- ${{ inputs.enforce-pr-size && '‚úÖ' || '‚è≠Ô∏è' }} PR size validation"
          echo "- ${{ inputs.custom-validation-command != '' && '‚úÖ' || '‚è≠Ô∏è' }} Custom validation"
          echo "- ‚úÖ Target branch validation"

      - name: Comment validation results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const validations = [
              { name: 'PR Title', enabled: ${{ inputs.enforce-pr-title }} },
              { name: 'Branch Naming', enabled: ${{ inputs.enforce-branch-naming }} },
              { name: 'File Patterns', enabled: ${{ inputs.enforce-file-patterns }} },
              { name: 'Commit Messages', enabled: ${{ inputs.enforce-commit-message }} },
              { name: 'PR Size', enabled: ${{ inputs.enforce-pr-size }} },
              { name: 'Custom Validation', enabled: '${{ inputs.custom-validation-command }}' !== '' },
              { name: 'Target Branch', enabled: true }
            ];
            
            let body = `## üîç PR Validation Results\n\n`;
            body += `**Validations performed:**\n`;
            
            validations.forEach(validation => {
              const status = validation.enabled ? '‚úÖ' : '‚è≠Ô∏è';
              body += `- ${status} ${validation.name}\n`;
            });
            
            if ('${{ inputs.enforce-pr-title }}' === 'true') {
              body += `\n**PR Title Pattern:** \`${{ inputs.pr-title-regex }}\`\n`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });